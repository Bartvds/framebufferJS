{
  "version": 3,
  "file": "generated.js",
  "sources": [
    "D:\\_Editing\\github\\32k\\framebufferJS\\node_modules\\browserify\\node_modules\\browser-pack\\_prelude.js",
    "D:/_Editing/github/32k/framebufferJS/lib/basic.js",
    "D:/_Editing/github/32k/framebufferJS/lib/core/fb.js",
    "D:/_Editing/github/32k/framebufferJS/lib/core/image.js",
    "D:/_Editing/github/32k/framebufferJS/lib/core/letters.js",
    "D:/_Editing/github/32k/framebufferJS/lib/core/pixel.js",
    "D:/_Editing/github/32k/framebufferJS/lib/core/util.js",
    "D:/_Editing/github/32k/framebufferJS/lib/render/plain.js",
    "D:/_Editing/github/32k/framebufferJS/lib/render/webgl.js"
  ],
  "names": [],
  "mappingslxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACl
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "'use strict';\r\n\r\n// lets decorate framebufffer export\r\nvar expose = require('./core/fb');\r\n\r\n// export usefull stuff\r\n// TODO figure out what goes where\r\nexpose.RenderWebGL = require('./render/webgl');\r\n\r\nmodule.exports = expose;\r\n",
    "'use strict';\r\n\r\nvar ImageArray = require('./image');\r\nvar letters = require('./letters');\r\nvar util = require('./util');\r\nvar pixel = require('./pixel');\r\n\r\nvar RenderPlain = require('./../render/plain');\r\n\r\n//TODO figure out how Framebuffer and ImageArray and the renderers relate to each-other\r\n// - maybe shovel some code around and put all pixel manipulation code in what is now ImageArray\r\nfunction Framebuffer(opts) {\r\n    // support usage without new\r\n    if (!(this instanceof Framebuffer)) {\r\n        return new Framebuffer(opts);\r\n    }\r\n    // import options\r\n    this.width = opts.width || 32;\r\n    this.height = opts.height || 32;\r\n\r\n    // grab canvas stuff\r\n    this.canvas = (typeof opts.canvas === 'string') ? document.getElementById(opts.canvas) : opts.canvas;\r\n    if (!this.canvas) {\r\n        throw new Error('cannot locate canvas with id \"' + opts.canvas + '\"');\r\n    }\r\n\r\n    // init internal data, use RGB (no alpha) so 3 channels\r\n    this.image = new ImageArray(this.width, this.height, false);\r\n    this.px = this.image.px;\r\n    this.channels = 3;\r\n\r\n    //alphaData(this.px, this.width, this.height, 255);\r\n    util.discoData(this.px, this.width, this.height);\r\n\r\n    // optional renderer\r\n    if (typeof opts.renderer === 'function') {\r\n        try {\r\n            this.renderer = new (opts.renderer)(this.image, this.canvas);\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n            console.log('render init error, switching to fallback');\r\n        }\r\n    }\r\n    // default & fallback\r\n    if (!this.renderer) {\r\n        this.renderer = new RenderPlain(this.image, this.canvas);\r\n    }\r\n}\r\n\r\nFramebuffer.prototype.fillrect = function (x, y, w, h, col) {\r\n    x = Math.floor(x);\r\n    y = Math.floor(y);\r\n    w = Math.floor(w);\r\n    h = Math.floor(h);\r\n\r\n    for (var i = x; i < x + w; i++) {\r\n        for (var j = y; j < y + h; j++) {\r\n            // TODO move this outside the loop\r\n            if (i < 0 || j < 0 || i >= this.width || j >= this.height) {\r\n                continue;\r\n            }\r\n            var p = (i + j * this.width) * this.channels;\r\n            this.px[p] = col[0];\r\n            this.px[p + 1] = col[1];\r\n            this.px[p + 2] = col[2];\r\n        }\r\n    }\r\n};\r\n\r\nFramebuffer.prototype.clear = function (col) {\r\n    var r = col[0];\r\n    var g = col[1];\r\n    var b = col[2];\r\n    var lim = this.width * this.height * this.channels;\r\n    for (var i = 0; i < lim; i += this.channels) {\r\n        this.px[i] = r;\r\n        this.px[i + 1] = g;\r\n        this.px[i + 2] = b;\r\n    }\r\n};\r\n\r\nFramebuffer.prototype.rect = function (x, y, w, h, col) {\r\n    x = Math.floor(x);\r\n    y = Math.floor(y);\r\n    w = Math.floor(w);\r\n    h = Math.floor(h);\r\n    for (var i = x; i < x + w; i++) {\r\n        for (var j = y; j < y + h; j++) {\r\n            if (i < 0 || j < 0 || i >= this.width || j >= this.height) {\r\n                continue;\r\n            }\r\n            if (i === x || j === y || i === x + w - 1 || j === y + h - 1) {\r\n                var p = (i + j * this.width) * this.channels;\r\n                this.px[p] = col[0];\r\n                this.px[p + 1] = col[1];\r\n                this.px[p + 2] = col[2];\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nFramebuffer.prototype.fillcircle = function (x, y, r, col) {\r\n    x = Math.floor(x);\r\n    y = Math.floor(y);\r\n    r = Math.floor(r);\r\n    for (var i = -r; i <= r; i++) {\r\n        for (var j = -r; j <= r; j++) {\r\n            if (x + i < 0 || y + j < 0 || x + i >= this.width || y + j >= this.height) {\r\n                continue;\r\n            }\r\n            if (i * i + j * j <= r * r) {\r\n                var p = (x + i + (y + j) * this.width) * this.channels;\r\n                this.px[p] = col[0];\r\n                this.px[p + 1] = col[1];\r\n                this.px[p + 2] = col[2];\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nFramebuffer.prototype.circle = function (x, y, r, col) {\r\n    x = Math.floor(x);\r\n    y = Math.floor(y);\r\n    r = Math.floor(r);\r\n    for (var i = 0; i < 360; i++) {\r\n        var cx = Math.round(Math.cos(i * (Math.PI / 180)) * r) + x;\r\n        var cy = Math.round(Math.sin(i * (Math.PI / 180)) * r) + y;\r\n\r\n        if (cx < 0 || cy < 0 || cx >= this.width || cy >= this.height) {\r\n            continue;\r\n        }\r\n        var p = (cx + cy * this.width) * this.channels;\r\n        this.px[p] = col[0];\r\n        this.px[p + 1] = col[1];\r\n        this.px[p + 2] = col[2];\r\n    }\r\n};\r\n\r\nFramebuffer.prototype.pixel = function (x, y, col) {\r\n    x = Math.floor(x);\r\n    y = Math.floor(y);\r\n\r\n    if (x < 0 || y < 0 || x >= this.width || y >= this.height) {\r\n        return;\r\n    }\r\n    var p = (x + y * this.width) * this.channels;\r\n    this.px[p] = col[0];\r\n    this.px[p + 1] = col[1];\r\n    this.px[p + 2] = col[2];\r\n};\r\n\r\nFramebuffer.prototype.shader = function (f) {\r\n    var rgb = [0, 0, 0];\r\n    for (var i = 0; i < this.width; i++) {\r\n        for (var j = 0; j < this.height; j++) {\r\n            var p = (i + j * this.width) * this.channels;\r\n            rgb[0] = this.px[p];\r\n            rgb[1] = this.px[p + 1];\r\n            rgb[2] = this.px[p + 2];\r\n            var col = f(i, j, rgb);\r\n            this.px[p] = col[0];\r\n            this.px[p + 1] = col[1];\r\n            this.px[p + 2] = col[2];\r\n        }\r\n    }\r\n};\r\n\r\nFramebuffer.prototype.drawLetter = function (x, y, chr, rgb) {\r\n    var l = letters[chr.toUpperCase()];\r\n    if (!l) {\r\n        return 0;\r\n    }\r\n    for (var i = 0; i < l[0].length; i++) {\r\n        for (var j = 0; j < l.length; j++) {\r\n            if (l[j].charAt(i) === '1') {\r\n                this.pixel(x + i, y + j, rgb);\r\n            }\r\n        }\r\n    }\r\n    return l[0].length;\r\n};\r\n\r\nFramebuffer.prototype.text = function (x, y, txt, rgb) {\r\n    for (var i = 0; i < txt.length; i++) {\r\n        x += this.drawLetter(x, y, txt.charAt(i), rgb) + 1;\r\n    }\r\n};\r\n\r\nFramebuffer.prototype.makesprite = function (width, height, useAlpha) {\r\n    return new ImageArray(width, height, useAlpha);\r\n};\r\n\r\nFramebuffer.prototype.blit = function (sprite, x, y, w, h, sx, sy) {\r\n    x = Math.floor(x);\r\n    y = Math.floor(y);\r\n    w = !w ? sprite.width : Math.floor(w);\r\n    h = !h ? sprite.height : Math.floor(h);\r\n    sx = !sx ? 0 : Math.floor(sx);\r\n    sy = !sy ? 0 : Math.floor(sy);\r\n    for (var i = sx; i < sx + w; i++) {\r\n        for (var j = sy; j < sy + h; j++) {\r\n            if (i < 0 || j < 0 || i >= sprite.width || j >= sprite.height) {\r\n                continue;\r\n            }\r\n            //TODO support alpha in sprite\r\n            var read = (i + j * sprite.width) * sprite.channels;\r\n            var write = (x + i - sx + (y + j - sy) * this.width) * this.channels;\r\n\r\n            this.px[write] = sprite.px[read];\r\n            this.px[write + 1] = sprite.px[read + 1];\r\n            this.px[write + 2] = sprite.px[read + 2];\r\n        }\r\n    }\r\n};\r\n\r\nFramebuffer.prototype.resize = function (render) {\r\n    this.renderer.resize();\r\n};\r\n\r\nFramebuffer.prototype.render = function () {\r\n    this.renderer.update();\r\n};\r\n\r\nFramebuffer.prototype.close = function () {\r\n    this.renderer.close();\r\n    this.renderer = null;\r\n    this.px = null;\r\n    this.canvas = null;\r\n    this.image = null;\r\n};\r\n\r\n// export pixel helpers (instance vs static.. why not both? :)\r\n//TODO this is a bit legacy.. maybe move to bundle files?\r\nFramebuffer.rand = Framebuffer.prototype.rand = pixel.rand;\r\nFramebuffer.hsv2rgb = Framebuffer.prototype.hsv2rgb = pixel.hsv2rgb;\r\nFramebuffer.rgb2hsv = Framebuffer.prototype.rgb2hsv = pixel.rgb2hsv;\r\n\r\nmodule.exports = Framebuffer;\r\n",
    "'use strict';\r\n\r\n// container to hold pixels and some info\r\n//TODO this might be the sprite? maybe add some methods?\r\nfunction ImageArray(width, height, useAlpha) {\r\n    if (!(this instanceof ImageArray)) {\r\n        return new ImageArray(width, height, useAlpha);\r\n    }\r\n    this.width = width;\r\n    this.height = height;\r\n    this.useAlpha = !!useAlpha;\r\n    this.channels = (useAlpha ? 4 : 3);\r\n\r\n    // keep reference to raw buffer for aliasing as Uint8Array\r\n    this.buffer = new ArrayBuffer(width * height * this.channels);\r\n\r\n    // work on a clamped array for safety\r\n    this.px = new Uint8ClampedArray(this.buffer);\r\n}\r\n\r\nImageArray.prototype.pixel = function (x, y, col) {\r\n    x = Math.floor(x);\r\n    y = Math.floor(y);\r\n\r\n    if (x < 0 || y < 0 || x >= this.width || y >= this.height) {\r\n        return;\r\n    }\r\n    var p = (x + y * this.width) * this.channels;\r\n    this.px[p] = col[0];\r\n    this.px[p + 1] = col[1];\r\n    this.px[p + 2] = col[2];\r\n};\r\n\r\nmodule.exports = ImageArray;\r\n",
    "'use strict';\r\n\r\n/**\r\n * Based off of a Gist of a 4x4 font by Martin Holzhauer:\r\n * https://gist.github.com/woodworker/7696835\r\n *\r\n * Features fairly significant modifications to fit characters into smaller horizontal space.\r\n */\r\nvar letters = {\r\n    'A': [\r\n        '1111',\r\n        '1001',\r\n        '1111',\r\n        '1001'\r\n    ],\r\n    'B': [\r\n        '100',\r\n        '111',\r\n        '101',\r\n        '111'\r\n    ],\r\n    'C': [\r\n        '1111',\r\n        '1000',\r\n        '1000',\r\n        '1111'\r\n    ],\r\n    'D': [\r\n        '1110',\r\n        '1001',\r\n        '1001',\r\n        '1110'\r\n    ],\r\n    'E': [\r\n        '111',\r\n        '110',\r\n        '100',\r\n        '111'\r\n    ],\r\n    'F': [\r\n        '111',\r\n        '100',\r\n        '110',\r\n        '100'\r\n    ],\r\n    'G': [\r\n        '111',\r\n        '100',\r\n        '101',\r\n        '111'\r\n    ],\r\n    'H': [\r\n        '101',\r\n        '101',\r\n        '111',\r\n        '101'\r\n    ],\r\n    'I': [\r\n        '1',\r\n        '1',\r\n        '1',\r\n        '1'\r\n    ],\r\n    'J': [\r\n        '001',\r\n        '001',\r\n        '101',\r\n        '111'\r\n    ],\r\n    'K': [\r\n        '101',\r\n        '110',\r\n        '101',\r\n        '101'\r\n    ],\r\n    'L': [\r\n        '10',\r\n        '10',\r\n        '10',\r\n        '11'\r\n    ],\r\n    'M': [\r\n        '11011',\r\n        '11011',\r\n        '10101',\r\n        '10001'\r\n    ],\r\n    'N': [\r\n        '1101',\r\n        '1101',\r\n        '1011',\r\n        '1001'\r\n    ],\r\n    'O': [\r\n        '111',\r\n        '101',\r\n        '101',\r\n        '111'\r\n    ],\r\n    'P': [\r\n        '111',\r\n        '101',\r\n        '111',\r\n        '100'\r\n    ],\r\n    'Q': [\r\n        '1110',\r\n        '1010',\r\n        '1110',\r\n        '0001'\r\n    ],\r\n    'R': [\r\n        '111',\r\n        '101',\r\n        '100',\r\n        '100'\r\n    ],\r\n    'S': [\r\n        '111',\r\n        '100',\r\n        '111',\r\n        '011'\r\n    ],\r\n    'T': [\r\n        '111',\r\n        '010',\r\n        '010',\r\n        '010'\r\n    ],\r\n    'U': [\r\n        '101',\r\n        '101',\r\n        '101',\r\n        '111'\r\n    ],\r\n    'V': [\r\n        '101',\r\n        '101',\r\n        '101',\r\n        '010'\r\n    ],\r\n    'W': [\r\n        '10001',\r\n        '10001',\r\n        '10101',\r\n        '01110'\r\n    ],\r\n    'X': [\r\n        '101',\r\n        '010',\r\n        '101',\r\n        '101'\r\n    ],\r\n    'Y': [\r\n        '101',\r\n        '101',\r\n        '010',\r\n        '010'\r\n    ],\r\n    'Z': [\r\n        '111',\r\n        '011',\r\n        '100',\r\n        '111'\r\n    ],\r\n    ' ': [\r\n        '0',\r\n        '0',\r\n        '0',\r\n        '0'\r\n    ],\r\n    '!': [\r\n        '1',\r\n        '1',\r\n        '0',\r\n        '1'\r\n    ],\r\n    '.': [\r\n        '0',\r\n        '0',\r\n        '0',\r\n        '1'\r\n    ]\r\n};\r\n\r\nmodule.exports = letters;\r\n",
    "'use strict';\r\n\r\nfunction rand(max) {\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\r\n/**\r\n * HSV to RGB color conversion\r\n *\r\n * H runs from 0 to 360 degrees\r\n * S and V run from 0 to 100\r\n *\r\n * Ported from the excellent java algorithm by Eugene Vishnevsky at\r\n * http://www.cs.rit.edu/~ncs/color/t_convert.html\r\n *\r\n * This, in turn, was taken from the snippet at\r\n * http://snipplr.com/view/14590/hsv-to-rgb/\r\n */\r\nfunction hsv2rgb(hsv) {\r\n    var r, g, b;\r\n    var i;\r\n    var f, p, q, t;\r\n    var h = hsv[0];\r\n    var s = hsv[1];\r\n    var v = hsv[2];\r\n\r\n    // Make sure our arguments stay in-range\r\n    h = Math.max(0, Math.min(360, h));\r\n    s = Math.max(0, Math.min(100, s));\r\n    v = Math.max(0, Math.min(100, v));\r\n\r\n    // We accept saturation and value arguments from 0 to 100 because that's\r\n    // how Photoshop represents those values. Internally, however, the\r\n    // saturation and value are calculated from a range of 0 to 1. We make\r\n    // That conversion here.\r\n    s /= 100;\r\n    v /= 100;\r\n\r\n    if (s === 0) {\r\n        // Achromatic (grey)\r\n        r = g = b = v;\r\n        return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\r\n    }\r\n\r\n    h /= 60; // sector 0 to 5\r\n    i = Math.floor(h);\r\n    f = h - i; // factorial part of h\r\n    p = v * (1 - s);\r\n    q = v * (1 - s * f);\r\n    t = v * (1 - s * (1 - f));\r\n\r\n    switch (i) {\r\n        case 0:\r\n            r = v;\r\n            g = t;\r\n            b = p;\r\n            break;\r\n\r\n        case 1:\r\n            r = q;\r\n            g = v;\r\n            b = p;\r\n            break;\r\n\r\n        case 2:\r\n            r = p;\r\n            g = v;\r\n            b = t;\r\n            break;\r\n\r\n        case 3:\r\n            r = p;\r\n            g = q;\r\n            b = v;\r\n            break;\r\n\r\n        case 4:\r\n            r = t;\r\n            g = p;\r\n            b = v;\r\n            break;\r\n\r\n        default: // case 5:\r\n            r = v;\r\n            g = p;\r\n            b = q;\r\n    }\r\n\r\n    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\r\n}\r\n\r\n/**\r\n * RGB to HSV color conversion\r\n *\r\n * Gratefully lifted from Mic's code on StackOverflow:\r\n * http://stackoverflow.com/questions/8022885/rgb-to-hsv-color-in-javascript#8023734\r\n */\r\nfunction rgb2hsv(rgb) {\r\n    var rr, gg, bb,\r\n        r = rgb[0] / 255,\r\n        g = rgb[1] / 255,\r\n        b = rgb[2] / 255,\r\n        h, s,\r\n        v = Math.max(r, g, b),\r\n        diff = v - Math.min(r, g, b),\r\n        diffc = function (c) {\r\n            return (v - c) / 6 / diff + 1 / 2;\r\n        };\r\n\r\n    if (diff === 0) {\r\n        h = s = 0;\r\n    } else {\r\n        s = diff / v;\r\n        rr = diffc(r);\r\n        gg = diffc(g);\r\n        bb = diffc(b);\r\n\r\n        if (r === v) {\r\n            h = bb - gg;\r\n        } else if (g === v) {\r\n            h = (1 / 3) + rr - bb;\r\n        } else if (b === v) {\r\n            h = (2 / 3) + gg - rr;\r\n        }\r\n        if (h < 0) {\r\n            h += 1;\r\n        } else if (h > 1) {\r\n            h -= 1;\r\n        }\r\n    }\r\n    return [\r\n        Math.round(h * 360),\r\n        Math.round(s * 100),\r\n        Math.round(v * 100)\r\n    ];\r\n}\r\n\r\nmodule.exports = {\r\n    rand: rand,\r\n    hsv2rgb: hsv2rgb,\r\n    rgb2hsv: rgb2hsv\r\n};\r\n",
    "'use strict';\r\n\r\nvar rand = require('./pixel').rand;\r\n\r\nfunction discoData(px, width, height, useAlpha) {\r\n    var lim, i;\r\n    if (useAlpha) {\r\n        lim = width * height * 4;\r\n        for (i = 0; i < lim; i += 4) {\r\n            px[i] = rand(256);\r\n            px[i + 1] = rand(256);\r\n            px[i + 2] = rand(256);\r\n            px[i + 3] = 255;\r\n        }\r\n    } else {\r\n        lim = width * height * 3;\r\n        for (i = 0; i < lim; i += 3) {\r\n            px[i] = rand(256);\r\n            px[i + 1] = rand(256);\r\n            px[i + 2] = rand(256);\r\n        }\r\n    }\r\n}\r\n\r\nfunction clearData(px, width, height, useAlpha) {\r\n    var lim, i;\r\n    if (useAlpha) {\r\n        lim = width * height * 4;\r\n        for (i = 0; i < lim; i += 4) {\r\n            px[i] = 0;\r\n            px[i + 1] = 0;\r\n            px[i + 2] = 0;\r\n            px[i + 3] = 255;\r\n        }\r\n    } else {\r\n        lim = width * height * 3;\r\n        for (i = 0; i < lim; i += 3) {\r\n            px[i] = 0;\r\n            px[i + 1] = 0;\r\n            px[i + 2] = 0;\r\n        }\r\n    }\r\n}\r\n\r\nfunction alphaData(px, width, height, alpha) {\r\n    var lim = width * height * 4;\r\n    for (var i = 0; i < lim; i += 4) {\r\n        px[i + 3] = alpha;\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    discoData: discoData,\r\n    clearData: clearData,\r\n    alphaData: alphaData\r\n};\r\n",
    "'use strict';\r\n\r\nvar util = require('../core//util');\r\n\r\n// basic renderer with nearest-neighbour\r\nfunction RenderPlain(image, canvas) {\r\n    this.canvas = canvas;\r\n\r\n    this.px = image.px;\r\n    this.width = image.width;\r\n    this.height = image.height;\r\n    this.channels = image.useAlpha ? 4 : 3;\r\n\r\n    this.ctx = this.canvas.getContext('2d');\r\n    // get canvas-sized image data\r\n    this.output = this.ctx.createImageData(this.canvas.width, this.canvas.height);\r\n\r\n    // make sure pixels are visible\r\n    util.alphaData(this.output.data, this.output.width, this.output.height, 255);\r\n    this.ctx.putImageData(this.output, 0, 0);\r\n}\r\n\r\nRenderPlain.prototype.resize = function (render) {\r\n    if (this.output.width !== this.canvas.width || this.output.height !== this.canvas.height) {\r\n        this.output = this.ctx.createImageData(this.canvas.width, this.canvas.height);\r\n        if (!render) {\r\n            // set the alpha channel to visible\r\n            util.alphaData(this.output.data, this.output.width, this.output.height, 255);\r\n        }\r\n    }\r\n    if (render) {\r\n        this.update();\r\n    }\r\n};\r\n\r\nRenderPlain.prototype.update = function () {\r\n    var data = this.output.data;\r\n    var width = this.output.width;\r\n    var height = this.output.height;\r\n\r\n    var fx = this.width / width;\r\n    var fy = this.height / height;\r\n\r\n    for (var i = 0; i < width; i++) {\r\n        for (var j = 0; j < height; j++) {\r\n            var x = Math.floor(i * fx);\r\n            var y = Math.floor(j * fy);\r\n            var read = (x + y * this.width) * this.channels;\r\n            var write = (i + j * width) * 4;\r\n\r\n            data[write] = this.px[read];\r\n            data[write + 1] = this.px[read + 1];\r\n            data[write + 2] = this.px[read + 2];\r\n        }\r\n    }\r\n    this.ctx.putImageData(this.output, 0, 0);\r\n};\r\n\r\nRenderPlain.prototype.close = function () {\r\n    this.px = null;\r\n    this.ctx = null;\r\n    this.canvas = null;\r\n    this.output = null;\r\n};\r\n\r\nmodule.exports = RenderPlain;\r\n",
    "'use strict';\r\n\r\nvar vertexShaderSource = [\r\n    // refer the vertices and texture coordinates\r\n    'attribute vec2 a_position;',\r\n    'attribute vec2 a_texCoord;',\r\n\r\n    // passed to fragment shader\r\n    'varying vec2 v_texCoord;',\r\n\r\n    'void main() {',\r\n        // simple transform\r\n    '    gl_Position = vec4(a_position, 0, 1);',\r\n        // interpolated value\r\n    '    v_texCoord = a_texCoord;',\r\n    '}'\r\n].join('\\n');\r\n\r\nvar fragmentShaderSource = [\r\n    // config something (cargo-cult from tutorial)\r\n    'precision mediump float;',\r\n\r\n    // texture sampler (number 0)\r\n    'uniform sampler2D u_image;',\r\n\r\n    // interpolated value from vertex shader\r\n    'varying vec2 v_texCoord;',\r\n\r\n    'void main() {',\r\n        // sample texture on the interpolated value; nearest-neighbour etc was configured earlier\r\n    '    gl_FragColor = texture2D(u_image, v_texCoord);',\r\n    '}'\r\n].join('\\n');\r\n\r\nfunction loadShader(gl, shaderSource, shaderType) {\r\n    var shader = gl.createShader(shaderType);\r\n    gl.shaderSource(shader, shaderSource);\r\n    gl.compileShader(shader);\r\n\r\n    // check if it worked (cargo-cult from tutorial)\r\n    var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    if (!compiled) {\r\n        throw new Error('error compiling shader \"' + shader + '\":' + gl.getShaderInfoLog(shader));\r\n    }\r\n    return shader;\r\n}\r\n\r\nfunction RenderWebGL(image, canvas) {\r\n    this.canvas = canvas;\r\n    this.image = image;\r\n    this.width = image.width;\r\n    this.height = image.height;\r\n\r\n    // use a Uint8Array view for WebGL compatibility\r\n    this.px = new Uint8Array(image.buffer);\r\n\r\n    // cheap check\r\n    if (!window.WebGLRenderingContext) {\r\n        throw new Error('browser does not support WegGL');\r\n    }\r\n\r\n    // let's not bother with alpha on main canvas\r\n    var glOpts = {alpha: false};\r\n\r\n    // lazy alias to local var to keep code clear, also do fancy context lookup\r\n    var gl = this.gl = this.canvas.getContext('webgl', glOpts) || this.canvas.getContext('experimental-webgl', glOpts);\r\n    if (!gl) {\r\n        throw new Error('could not create WebGL context');\r\n    }\r\n\r\n    // setup a GLSL program\r\n    var program = gl.createProgram();\r\n\r\n    // add shaders\r\n    gl.attachShader(program, loadShader(gl, vertexShaderSource, gl.VERTEX_SHADER));\r\n    gl.attachShader(program, loadShader(gl, fragmentShaderSource, gl.FRAGMENT_SHADER));\r\n    gl.linkProgram(program);\r\n\r\n    // check the link status (cargo-cult from tutorial)\r\n    var linked = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n    if (!linked) {\r\n        // something went wrong with the link\r\n        throw new Error(('error in program linking:' + gl.getProgramInfoLog(program)));\r\n    }\r\n    gl.useProgram(program);\r\n\r\n    // shader variables that refer to the vertices and texture coordinates\r\n    this.positionLocation = gl.getAttribLocation(program, 'a_position');\r\n    this.texCoordLocation = gl.getAttribLocation(program, 'a_texCoord');\r\n\r\n    // setup vertices\r\n    this.positionBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\r\n\r\n    gl.enableVertexAttribArray(this.positionLocation);\r\n    gl.vertexAttribPointer(this.positionLocation, 2, gl.FLOAT, false, 0, 0);\r\n\r\n    // upload vertices for 2 triangles in 2D: 3 x 2 x 2 elements\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\r\n        -1.0, -1.0,\r\n        1.0, -1.0,\r\n        -1.0,  1.0,\r\n        -1.0,  1.0,\r\n        1.0, -1.0,\r\n        1.0,  1.0\r\n    ]), gl.STATIC_DRAW);\r\n\r\n    // setup texture coordinates\r\n    this.texCoordBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.texCoordBuffer);\r\n\r\n    gl.enableVertexAttribArray(this.texCoordLocation);\r\n    gl.vertexAttribPointer(this.texCoordLocation, 2, gl.FLOAT, false, 0, 0);\r\n\r\n    // upload texture coordinates matching the vertices\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\r\n        0.0, 1.0,\r\n        1.0, 1.0,\r\n        0.0, 0.0,\r\n        0.0, 0.0,\r\n        1.0, 1.0,\r\n        1.0, 0.0\r\n    ]), gl.STATIC_DRAW);\r\n\r\n    // create a texture\r\n    this.texture = gl.createTexture();\r\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n\r\n    // set the parameters so we can render any size image\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n\r\n    // clear the back buffer (with alpha)\r\n    gl.clearColor(0, 0, 0, 1);\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n\r\n    // turn off rendering to alpha\r\n    gl.colorMask(true, true, true, false);\r\n\r\n    // apply size\r\n    gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n}\r\n\r\nRenderWebGL.prototype.resize = function (render) {\r\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n    if (render) {\r\n        this.render();\r\n    } else {\r\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n    }\r\n};\r\n\r\nRenderWebGL.prototype.update = function () {\r\n    // upload the pixels to the texture.\r\n    this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGB, this.width, this.height, 0, this.gl.RGB, this.gl.UNSIGNED_BYTE, this.px);\r\n    // render state\r\n    this.gl.drawArrays(this.gl.TRIANGLES, 0, 6);\r\n};\r\n\r\nRenderWebGL.prototype.close = function () {\r\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n    //TODO what else? how unload WebGL?\r\n    this.gl = null;\r\n    this.px = null;\r\n    this.ctx = null;\r\n    this.canvas = null;\r\n    this.output = null;\r\n};\r\n\r\nmodule.exports = RenderWebGL;\r\n"
  ],
  "sourceRoot": ""
}